{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","ok","Error","status","this","json","console","log","message","api","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,aAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCFbC,EAAW,SAACR,GACrB,OAAQ,qBAAKC,UAAU,YAAf,SAEAD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJhDO,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC6CjEG,E,kDA1CX,aAAe,IAAD,8BACV,gBAsBJH,aAAe,SAAAI,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SArBrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,8EASd,4BAAAI,EAAA,+EAE6BC,MAAM,8CAFnC,WAEYC,EAFZ,QAGsBC,GAHtB,sBAGgC,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,2BAHhC,mBAIeC,KAJf,SAI8CJ,EAASK,OAJvD,gCAI8BrB,SAJ9B,6BAIoBS,SAJpB,mDAMQa,QAAQC,IAAI,KAAIC,SANxB,0D,qFAUA,WACIJ,KAAKK,Q,oBAOT,WAAU,IAAD,EAC2BL,KAAKP,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACXgB,EAAmB1B,EAAS2B,QAAO,SAAAjC,GAAO,OAAIA,EAAQG,KAAK+B,cAAcC,SAASnB,EAAYkB,kBAEpG,OACI,sBAAKpC,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAU0B,W,GApClBI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b762a5ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nexport const Card = (props)=>(\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monsters\"/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = (props) =>{\r\n    return (<div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n        }\r\n    </div>)\r\n}\r\n","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className='search' type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n);","import {Component} from 'react';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport './App.css';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    async api() {\n        try {\n            let response = await fetch('https://jsonplaceholder.typicode.com/users');\n            if (!response.ok) throw new Error(`${response.status}: Unable to fetch API.`);\n            return this.setState({monsters: await response.json()});\n        } catch (err) {\n            console.log(err.message);\n        }\n    }\n\n    componentDidMount() {\n        this.api()\n    }\n\n    handleChange = e =>{\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox placeholder='Search Monsters' handleChange={this.handleChange} />\n                <CardList monsters={filteredMonsters}/>\n\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}